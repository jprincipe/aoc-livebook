# AOC 2023 - Day 06

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## AOC Helper

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"6","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "6", System.fetch_env!("LB_AOC_SESSION"))
```

<!-- livebook:{"branch_parent_index":0} -->

## Part 1

## Code

```elixir
defmodule PartOne do
  def parse_rounds(input) do
    [
      "Time:" <> times,
      "Distance:" <> distances
    ] = String.split(input, "\n")

    times =
      times
      |> String.trim()
      |> String.split(" ")
      |> Enum.reject(&(&1 == ""))
      |> Enum.map(&String.to_integer/1)

    distances =
      distances
      |> String.trim()
      |> String.split(" ")
      |> Enum.reject(&(&1 == ""))
      |> Enum.map(&String.to_integer/1)

    times
    |> Enum.with_index()
    |> Enum.map(fn {time, index} ->
      {time, Enum.at(distances, index)}
    end)
  end

  def test_round({time, distance}) do
    0..time
    |> Enum.to_list()
    |> Enum.filter(fn hold_ms ->
      speed_mmps = hold_ms
      remaining_ms = time - hold_ms

      speed_mmps * remaining_ms > distance
    end)
    |> Enum.count()
  end

  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> parse_rounds()
    |> Enum.map(&test_round/1)
    |> Enum.reduce(1, &(&1 * &2))
  end
end
```

## Test

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input "Time:      7  15   30
Distance:  9  40  200"
  @expected 288

  test "part one" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

## Solution

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":4} -->

## Part 2

## Code

```elixir
defmodule PartTwo do
  def parse_round(input) do
    [
      "Time:" <> times,
      "Distance:" <> distances
    ] = String.split(input, "\n")

    time =
      times
      |> String.trim()
      |> String.split(" ")
      |> Enum.reject(&(&1 == ""))
      |> Enum.join()
      |> String.to_integer()

    distance =
      distances
      |> String.trim()
      |> String.split(" ")
      |> Enum.reject(&(&1 == ""))
      |> Enum.join()
      |> String.to_integer()

    {time, distance}
  end

  def test_round({time, distance}) do
    0..time
    |> Enum.to_list()
    |> Enum.filter(fn hold_ms ->
      speed_mmps = hold_ms
      remaining_ms = time - hold_ms

      speed_mmps * remaining_ms > distance
    end)
    |> Enum.count()
  end

  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> parse_round()
    |> test_round()
  end
end
```

## Test

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input "Time:      7  15   30
Distance:  9  40  200"
  @expected 71503

  test "part two" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

## Solution

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":3249,"stamp":{"token":"XCP.DLGrSael6jNZHcQ535y4vkuMrMBQbufkoktD_D5PMx5D8y-QXtO4Zr2p_j4AKtvmTBHv_dGuLkprkmXi5O_fTCETMXtu_hj2sDJ1IUxzmKr9zBumShg","version":2}} -->
